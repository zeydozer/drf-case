version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-flightops_db}
      POSTGRES_USER: ${POSTGRES_USER:-flightops_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-flightops_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - flightops_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-flightops_user} -d ${POSTGRES_DB:-flightops_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - flightops_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Web Application with Gunicorn
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env.prod
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flightops_user}:${POSTGRES_PASSWORD:-flightops_pass}@db:5432/${POSTGRES_DB:-flightops_db}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-django-insecure-fallback-key-change-this}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,web,nginx}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - flightops_network
    restart: unless-stopped
    expose:
      - "8000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./nginx/certbot_www:/var/www/certbot
      - ./nginx/certbot_certs:/etc/letsencrypt
    depends_on:
      - web
    networks:
      - flightops_network
    restart: unless-stopped

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - .:/app
    env_file:
      - .env.prod
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flightops_user}:${POSTGRES_PASSWORD:-flightops_pass}@db:5432/${POSTGRES_DB:-flightops_db}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-django-insecure-fallback-key-change-this}
    depends_on:
      - db
      - redis
    networks:
      - flightops_network
    command: celery -A drf_case worker --loglevel=info
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - .:/app
    env_file:
      - .env.prod
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flightops_user}:${POSTGRES_PASSWORD:-flightops_pass}@db:5432/${POSTGRES_DB:-flightops_db}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-django-insecure-fallback-key-change-this}
    depends_on:
      - db
      - redis
    networks:
      - flightops_network
    command: celery -A drf_case beat --loglevel=info
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  flightops_network:
    driver: bridge
