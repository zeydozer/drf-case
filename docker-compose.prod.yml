version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-flightops_db}
      POSTGRES_USER: ${POSTGRES_USER:-flightops_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-flightops_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - flightops_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-flightops_user} -d ${POSTGRES_DB:-flightops_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - flightops_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Web Application
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flightops_user}:${POSTGRES_PASSWORD:-flightops_pass}@db:5432/${POSTGRES_DB:-flightops_db}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - flightops_network
    restart: unless-stopped

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - .:/app
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flightops_user}:${POSTGRES_PASSWORD:-flightops_pass}@db:5432/${POSTGRES_DB:-flightops_db}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - redis
    networks:
      - flightops_network
    command: celery -A drf_case worker --loglevel=info
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - .:/app
    environment:
      - DEBUG=0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-flightops_user}:${POSTGRES_PASSWORD:-flightops_pass}@db:5432/${POSTGRES_DB:-flightops_db}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - db
      - redis
    networks:
      - flightops_network
    command: celery -A drf_case beat --loglevel=info
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  flightops_network:
    driver: bridge
